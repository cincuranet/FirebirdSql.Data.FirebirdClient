/*
 *    The contents of this file are subject to the Initial
 *    Developer's Public License Version 1.0 (the "License");
 *    you may not use this file except in compliance with the
 *    License. You may obtain a copy of the License at
 *    https://github.com/FirebirdSQL/NETProvider/blob/master/license.txt.
 *
 *    Software distributed under the License is distributed on
 *    an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
 *    express or implied. See the License for the specific
 *    language governing rights and limitations under the License.
 *
 *    All Rights Reserved.
 */

//$Authors = Jiri Cincura (jiri@cincura.net), Jean Ressouche, Rafael Almeida (ralms@ralms.net)

using FirebirdSql.EntityFrameworkCore.Firebird.Infrastructure.Internal;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata;
using FirebirdSql.EntityFrameworkCore.Firebird.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using System;
using System.Linq;
using FirebirdClientConnection = FirebirdSql.Data.FirebirdClient.FbConnection;
using Microsoft.EntityFrameworkCore.Storage;

namespace FirebirdSql.EntityFrameworkCore.Firebird.Migrations
{
	public class FbMigrationsSqlGenerator : MigrationsSqlGenerator
	{
		readonly IFbMigrationSqlGeneratorBehavior _behavior; 
		private IFbOptions _options;
		private Version _serverVersion;

		public FbMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, IFbMigrationSqlGeneratorBehavior behavior, IFbOptions options)
			: base(dependencies)
		{
			_options = options;
			_behavior = behavior ?? new FbMigrationSqlGeneratorBehavior(dependencies.SqlGenerationHelper);

			using (var connection = new FirebirdClientConnection(_options.FirebirdOptions.ConnectionString))
			{
				connection.Open();
				_serverVersion = Data.Services.FbServerProperties.ParseServerVersion(connection.ServerVersion);
			}
		}

		protected override void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate)
		{
			base.Generate(operation, model, builder, false);
			if (terminate)
			{
				builder.Append(Dependencies.SqlGenerationHelper.StatementTerminator);
				EndStatement(builder);

				var columns = operation.Columns.Where(p => !p.IsNullable && string.IsNullOrWhiteSpace(p.DefaultValueSql) && p.DefaultValue == null);
				foreach (var column in columns)
				{
					var colAnnotation = column.FindAnnotation(FbAnnotationNames.ValueGenerationStrategy);
					if (colAnnotation != null)
					{
						var typeSequence = IsSequenceIdentityOrTrigger(colAnnotation.Value as FbValueGenerationStrategy?);
						if (typeSequence == FbValueGenerationStrategy.SequenceTrigger)
						{
							foreach (var item in _behavior.CreateIdentityForColumn(builder, column.Name, column.Table))
							{
								EndStatement(builder);
							}
						}
					}
				}
			}
		}

		protected override void ColumnDefinition(string schema, string table, string name, Type clrType, string type, bool? unicode, int? maxLength, bool rowVersion, bool nullable, object defaultValue, string defaultValueSql, string computedColumnSql, IAnnotatable annotatable, IModel model, MigrationCommandListBuilder builder)
		{
			var valueGenerationStrategy = annotatable[FbAnnotationNames.ValueGenerationStrategy] as FbValueGenerationStrategy?;
			var typeSequence = IsSequenceIdentityOrTrigger(valueGenerationStrategy);

			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(name))
				   .Append(" ")
				   .Append(type ?? GetColumnType(schema, table, name, clrType, unicode, maxLength, rowVersion, model));

			if (!nullable)
			{
				switch (typeSequence)
				{
					case FbValueGenerationStrategy.IdentityColumn:
						builder.Append(" GENERATED BY DEFAULT AS IDENTITY NOT NULL");
						break;
					case FbValueGenerationStrategy.None:
						builder.Append(" NOT NULL");
						break;
				}
			}
			else
			{
				if (defaultValueSql != null)
				{
					builder.Append(" DEFAULT ")
						   .Append(defaultValueSql);
				}
				else if (defaultValue != null)
				{
					var defaultValueLiteral = Dependencies.TypeMapper.GetMapping(clrType);
					builder.Append(" DEFAULT ")
						   .Append(defaultValueLiteral.GenerateSqlLiteral(defaultValue));
				}

				if (!nullable)
					builder.Append(" NOT NULL");
			}
		}

		protected override void ForeignKeyAction(ReferentialAction referentialAction, MigrationCommandListBuilder builder)
		{
			if (referentialAction == ReferentialAction.Restrict)
				builder.Append("NO ACTION");
			else
				base.ForeignKeyAction(referentialAction, builder);
		}

		private FbValueGenerationStrategy IsSequenceIdentityOrTrigger(FbValueGenerationStrategy? valueGenerate)
		{
			return valueGenerate ?? FbValueGenerationStrategy.None;
		}

		private void GenerateSequenceOnTrigger(MigrationCommandListBuilder builder, string table, string column)
		{
			var mergeColumnTable = string.Format("{0}_{1}", table, column).ToUpper();
			var sequenceName = string.Format("GEN_{0}", mergeColumnTable);
			var triggerName = string.Format("ID_{0}", mergeColumnTable);

			builder.AppendLine("EXECUTE BLOCK");
			builder.AppendLine("AS");
			builder.AppendLine("BEGIN");
			builder.Append("if (not exists(select 1 from rdb$generators where rdb$generator_name = '");
			builder.Append(sequenceName);
			builder.Append("')) then");
			builder.AppendLine();
			builder.AppendLine("begin");
			builder.Indent();
			builder.Append("execute statement 'create sequence ");
			builder.Append(sequenceName);
			builder.Append("';");
			builder.DecrementIndent();
			builder.AppendLine();
			builder.AppendLine("end");
			builder.AppendLine("END");
			EndStatement(builder);

			builder.Append("CREATE OR ALTER TRIGGER ");
			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(triggerName));
			builder.Append(" ACTIVE BEFORE INSERT ON ");
			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(table));
			builder.AppendLine();
			builder.AppendLine("AS");
			builder.AppendLine("BEGIN");
			builder.Append("if (new.");
			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(column));
			builder.Append(" is null) then");
			builder.AppendLine();
			builder.AppendLine("begin");
			builder.Indent();
			builder.Append("new.");
			builder.Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(column));
			builder.Append(" = next value for ");
			builder.Append(sequenceName);
			builder.Append(";");
			builder.DecrementIndent();
			builder.AppendLine();
			builder.AppendLine("end");
			builder.Append("END");
			EndStatement(builder);
		}

#warning Finish
	}
}
