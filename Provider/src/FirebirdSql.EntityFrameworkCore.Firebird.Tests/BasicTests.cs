/*
 *    The contents of this file are subject to the Initial
 *    Developer's Public License Version 1.0 (the "License");
 *    you may not use this file except in compliance with the
 *    License. You may obtain a copy of the License at
 *    https://github.com/FirebirdSQL/NETProvider/blob/master/license.txt.
 *
 *    Software distributed under the License is distributed on
 *    an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either
 *    express or implied. See the License for the specific
 *    language governing rights and limitations under the License.
 *
 *    All Rights Reserved.
 */

//$Authors = Jiri Cincura (jiri@cincura.net)

using System;
using System.Linq;
using FirebirdSql.EntityFrameworkCore.Firebird.Extensions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.Logging;
using NUnit.Framework;

namespace FirebirdSql.EntityFrameworkCore.Firebird.Tests
{
	[TestFixture]
	public class BasicTests
	{
		[Test]
		public void SimpleSelect()
		{
			using (var db = GetDbContext())
			{
				var data = db.Set<MonAttachment>().ToList();
				Assert.IsNotEmpty(data);
			}
		}

		[Test]
		public void SelectWithWhere()
		{
			using (var db = GetDbContext())
			{
				var data = db.Set<MonAttachment>()
					.Where(x => x.AttachmentName.Trim() != string.Empty && x.Timestamp.Second > -1)
					.ToList();
				Assert.IsNotEmpty(data);
			}
		}

		[Test]
		public void SimpleInsert()
		{
			using (var db = GetDbContext())
			{
				db.Database.ExecuteSqlCommand("recreate table test (id int generated by default as identity primary key, name varchar(20))");
				var entity = new TestEntity() { Name = "foobar" };
				db.Set<TestEntity>().Add(entity);
				db.SaveChanges();
				Assert.AreNotEqual(0, entity.Id);
			}
		}

		static TestDbContext GetDbContext()
		{
			var result = new TestDbContext();
			var loggerFactory = result.GetService<ILoggerFactory>();
			loggerFactory.AddConsole();
			return result;
		}
	}

	class TestDbContext : DbContext
	{
		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		{
			optionsBuilder.UseFirebird(@"database=localhost:test.fdb;user=sysdba;password=masterkey");
		}

		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
			base.OnModelCreating(modelBuilder);

			var monAttachmentConf = modelBuilder.Entity<MonAttachment>();
			monAttachmentConf.HasKey(x => x.AttachmentId);
			monAttachmentConf.Property(x => x.AttachmentId).HasColumnName("MON$ATTACHMENT_ID");
			monAttachmentConf.Property(x => x.AttachmentName).HasColumnName("MON$ATTACHMENT_NAME");
			monAttachmentConf.Property(x => x.Timestamp).HasColumnName("MON$TIMESTAMP");
			monAttachmentConf.ToTable("MON$ATTACHMENTS");

			var testEntityConf = modelBuilder.Entity<TestEntity>();
			testEntityConf.Property(x => x.Id).HasColumnName("ID")
				.UseFirebirdIdentityColumn();
			testEntityConf.Property(x => x.Name).HasColumnName("NAME");
			testEntityConf.ToTable("TEST");
		}
	}

	class MonAttachment
	{
		public int AttachmentId { get; set; }
		public string AttachmentName { get; set; }
		public DateTime Timestamp { get; set; }
	}

	class TestEntity
	{
		public int Id { get; set; }
		public string Name { get; set; }
	}
}
