SET SQL DIALECT 3;

SET NAMES UTF8;


/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/


CREATE TABLE ROLES (
    ROLENAME         WP_VARCHAR100 NOT NULL,
    APPLICATIONNAME  WP_VARCHAR100 NOT NULL
);

CREATE TABLE USERSINROLES (
    USERNAME         WP_VARCHAR100 NOT NULL,
    ROLENAME         WP_VARCHAR100 NOT NULL,
    APPLICATIONNAME  WP_VARCHAR100 NOT NULL,
    UPPERUSERNAME    WP_VARCHAR100
);



/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE INDEX ROLES_APPLICATIONNAME ON ROLES (APPLICATIONNAME);
CREATE INDEX ROLES_ROLENAME ON ROLES (ROLENAME);
CREATE INDEX USERSINROLES_APPLICATIONNAME ON USERSINROLES (APPLICATIONNAME);
CREATE INDEX USERSINROLES_ROLENAME ON USERSINROLES (ROLENAME);
CREATE INDEX USERSINROLES_UPPERUSERNAME ON USERSINROLES (UPPERUSERNAME);
CREATE INDEX USERSINROLES_USERNAME ON USERSINROLES (USERNAME);


/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE ROLES_ADDUSERTOROLE (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100,
    USERNAME   WP_VARCHAR100)
AS
BEGIN
 INSERT INTO USERSINROLES (USERNAME,UPPERUSERNAME,ROLENAME,APPLICATIONNAME)
 VALUES (:USERNAME,UPPER(:USERNAME),:ROLENAME,:APPLICATIONNAME);
END
^

CREATE OR ALTER PROCEDURE ROLES_CREATEROLE (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100)
AS
BEGIN
 INSERT INTO ROLES (ROLENAME,APPLICATIONNAME)
 VALUES (:ROLENAME,:APPLICATIONNAME);
END
^

CREATE OR ALTER PROCEDURE ROLES_DELETEROLE (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100)
AS
BEGIN
 DELETE FROM ROLES WHERE rolename = :rolename
                        AND applicationname = :applicationname;
 DELETE FROM USERSINROLES WHERE rolename = :rolename
                          AND applicationname = :applicationname;
END
^

CREATE OR ALTER PROCEDURE ROLES_DELETEUSERROLE (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100,
    USERNAME   WP_VARCHAR100)
AS
BEGIN
 DELETE FROM USERSINROLES WHERE
                          UPPERUSERNAME = UPPER(:username)
                          AND ROLENAME = :rolename
                          AND APPLICATIONNAME = :APPLICATIONNAME;
END
^

CREATE OR ALTER PROCEDURE ROLES_FINDROLEUSERS (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100,
    USERNAMETOMATCH   WP_VARCHAR100)
RETURNS (
    USERNAME   WP_VARCHAR100)
AS
BEGIN
 FOR SELECT USERNAME FROM USERSINROLES WHERE ROLENAME = :ROLENAME
                                             AND APPLICATIONNAME = :APPLICATIONNAME
                                             AND UPPERUSERNAME LIKE :USERNAMETOMATCH
     INTO :USERNAME
 DO BEGIN
  SUSPEND;
 END
END
^

CREATE OR ALTER PROCEDURE ROLES_GETALLROLES (
    APPLICATIONNAME   WP_VARCHAR100)
RETURNS (
    ROLENAME   WP_VARCHAR100)
AS
BEGIN
 FOR SELECT ROLENAME FROM ROLES WHERE applicationname = :applicationname
     INTO :ROLENAME
 DO BEGIN
  SUSPEND;
 END
END
^

CREATE OR ALTER PROCEDURE ROLES_GETROLEUSERS (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100)
RETURNS (
    USERNAME   WP_VARCHAR100)
AS
BEGIN
 FOR SELECT USERNAME FROM USERSINROLES
                 WHERE ROLENAME = :ROLENAME AND APPLICATIONNAME = :APPLICATIONNAME

     INTO :USERNAME
 DO BEGIN
  SUSPEND;
 END
END
^

CREATE OR ALTER PROCEDURE ROLES_GETUSERROLES (
    APPLICATIONNAME   WP_VARCHAR100,
    USERNAME   WP_VARCHAR100)
RETURNS (
    ROLENAME   WP_VARCHAR100)
AS
BEGIN
 FOR SELECT ROLENAME FROM USERSINROLES WHERE UPPERUSERNAME = UPPER(:USERNAME)
                                       AND APPLICATIONNAME = :applicationname
     INTO :ROLENAME
 DO BEGIN
  SUSPEND;
 END
END
^

CREATE OR ALTER PROCEDURE ROLES_ISEXISTS (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100)
RETURNS (
    RES   WP_INTEGER)
AS
BEGIN
 RES = 0;
 if (exists(SELECT 1 FROM ROLES
                   WHERE ROLENAME = :ROLENAME
                   AND APPLICATIONNAME = :APPLICATIONNAME ) )
      then RES=1;
 SUSPEND;
END
^

CREATE OR ALTER PROCEDURE ROLES_ISUSERINROLE (
    APPLICATIONNAME   WP_VARCHAR100,
    ROLENAME   WP_VARCHAR100,
    USERNAME   WP_VARCHAR100)
RETURNS (
    RES   WP_INTEGER)
AS
BEGIN
 RES = 0;
 if (exists (SELECT 1 FROM USERSINROLES
                 WHERE UPPERUSERNAME = UPPER(:USERNAME) AND ROLENAME = :ROLENAME
                       AND APPLICATIONNAME = :APPLICATIONNAME))
                then RES=1;
 SUSPEND;
END
^


SET TERM ; ^


/******************************************************************************/
/*                                 Privileges                                 */
/******************************************************************************/

/* Privileges of procedures */
GRANT INSERT ON USERSINROLES TO PROCEDURE ROLES_ADDUSERTOROLE;
GRANT INSERT ON ROLES TO PROCEDURE ROLES_CREATEROLE;
GRANT SELECT, DELETE ON ROLES TO PROCEDURE ROLES_DELETEROLE;
GRANT SELECT, DELETE ON USERSINROLES TO PROCEDURE ROLES_DELETEROLE;
GRANT SELECT, DELETE ON USERSINROLES TO PROCEDURE ROLES_DELETEUSERROLE;
GRANT SELECT ON USERSINROLES TO PROCEDURE ROLES_FINDROLEUSERS;
GRANT SELECT ON ROLES TO PROCEDURE ROLES_GETALLROLES;
GRANT SELECT ON USERSINROLES TO PROCEDURE ROLES_GETROLEUSERS;
GRANT SELECT ON USERSINROLES TO PROCEDURE ROLES_GETUSERROLES;
GRANT SELECT ON ROLES TO PROCEDURE ROLES_ISEXISTS;
GRANT SELECT ON USERSINROLES TO PROCEDURE ROLES_ISUSERINROLE;