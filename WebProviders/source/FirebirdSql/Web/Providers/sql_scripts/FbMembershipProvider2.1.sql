SET SQL DIALECT 3;

SET NAMES UTF8;

/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/

CREATE TABLE USERS (
    PKID                        WP_CHAR16_OCTETS,
    USERNAME                    WP_VARCHAR100 NOT NULL,
    UPPERUSERNAME               WP_VARCHAR100,
    APPLICATIONNAME             WP_VARCHAR100 NOT NULL,
    EMAIL                       WP_VARCHAR100 NOT NULL,
    UPPEREMAIL                  WP_VARCHAR100,
    COMMENT                     WP_VARCHAR100,
    USERPASSWORD                WP_VARCHAR100 NOT NULL,
    PASSWORDSALT                WP_VARCHAR100,
    PASSWORDFORMAT              WP_INTEGER,
    PASSWORDQUESTION            WP_VARCHAR100,
    PASSWORDANSWER              WP_VARCHAR100,
    ISAPPROVED                  WP_BOOL,
    LASTACTIVITYDATE            WP_TIMESTAMP,
    LASTLOGINDATE               WP_TIMESTAMP,
    LASTPASSWORDCHANGEDDATE     WP_TIMESTAMP,
    CREATIONDATE                WP_TIMESTAMP,
    ISONLINE                    WP_BOOL,
    ISLOCKEDOUT                 WP_BOOL,
    LASTLOCKEDOUTDATE           WP_TIMESTAMP,
    FAILEDPASSWORDATTEMPTCOUNT  WP_INTEGER,
    FAILEDPASSWORDATTEMPTSTART  WP_TIMESTAMP,
    FAILEDPASSWORDANSWERCOUNT   WP_INTEGER,
    FAILEDPASSWORDANSWERSTART   WP_TIMESTAMP
);



/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE USERS ADD CONSTRAINT PK_USERS PRIMARY KEY (PKID);


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE INDEX USERS_EMAIL ON USERS (EMAIL);
CREATE INDEX USERS_UPPEREMAIL ON USERS (UPPEREMAIL);
CREATE INDEX USERS_UPPERUSERNAME ON USERS (UPPERUSERNAME);
CREATE INDEX USERS_USERNAME ON USERS (USERNAME);
CREATE UNIQUE INDEX USERS_USERNAME_APPLICATION ON USERS (USERNAME, APPLICATIONNAME);


/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE MEMBERSHIP_CREATEUSER (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    USERPASSWORD TYPE OF WP_VARCHAR100,
    PASSWORDSALT TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    PASSWORDANSWER TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    UNIQUEEMAIL TYPE OF WP_BOOL,
    PASSWORDFORMAT TYPE OF WP_INTEGER,
    USERID TYPE OF WP_CHAR16_OCTETS)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE NEWUSERID TYPE OF WP_CHAR16_OCTETS;
BEGIN
 NEWUSERID = NULL;
 SELECT USERS.PKID FROM USERS WHERE USERS.UPPERUSERNAME = UPPER(:USERNAME) AND USERS.APPLICATIONNAME = :APPLICATIONNAME
 INTO :NEWUSERID;
 IF (:NEWUSERID IS NULL) THEN
 BEGIN
  IF ((:UNIQUEEMAIL = 1) AND ((EXISTS ( SELECT PKID FROM USERS WHERE UPPER(:EMAIL) = UPPEREMAIL)))) THEN
   RETURNCODE = 7;
  ELSE
  BEGIN
   INSERT INTO USERS
   (
    PKID,
    USERNAME, 
    UPPERUSERNAME,
    USERPASSWORD,
    EMAIL, 
    UPPEREMAIL,
    ISAPPROVED, 
    PASSWORDSALT,
    PASSWORDFORMAT,
    PASSWORDQUESTION,
    PASSWORDANSWER,
    APPLICATIONNAME,
    CREATIONDATE,
    LASTPASSWORDCHANGEDDATE,
    LASTACTIVITYDATE,
    ISLOCKEDOUT,
    ISONLINE,
    LASTLOCKEDOUTDATE,
    FAILEDPASSWORDATTEMPTCOUNT,
    FAILEDPASSWORDATTEMPTSTART,
    FAILEDPASSWORDANSWERCOUNT,
    FAILEDPASSWORDANSWERSTART
   )
   VALUES
   (
   :USERID,
   :USERNAME,
   UPPER(:USERNAME),
   :USERPASSWORD,
   :EMAIL,
   UPPER(:EMAIL),
   :ISAPPROVED,
   :PASSWORDSALT,
   :PASSWORDFORMAT,
   :passwordquestion,
   :passwordanswer,
   :APPLICATIONNAME,
   'NOW',
   'NOW',
   'NOW',
   0,
   0,
   'NOW',
   0,
   'NOW',
   0,
   'NOW'
   );
   RETURNCODE = 0;
  END
 END
 ELSE
  RETURNCODE = 6;

END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_DELETEUSER (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    DELETEALLRELATEDDATA TYPE OF WP_INTEGER)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE PKID TYPE OF WP_CHAR16_OCTETS;
DECLARE VARIABLE VNAME TYPE OF WP_VARCHAR100;
BEGIN
  SELECT PKID,USERNAME FROM USERS WHERE UPPERUSERNAME = UPPER(:USERNAME) AND APPLICATIONNAME = :APPLICATIONNAME INTO :PKID,:VNAME;
  IF (VNAME IS NULL) THEN
     RETURNCODE = -1;
  ELSE
  BEGIN
   RETURNCODE = 1;
   DELETE FROM USERS WHERE PKID = :PKID;
   IF (DELETEALLRELATEDDATA = 1) THEN
   BEGIN
    DELETE FROM USERSINROLES WHERE USERSINROLES.USERNAME = :VNAME AND APPLICATIONNAME = :APPLICATIONNAME;   -- Remove if you don't use role provider
    DELETE FROM PROFILES WHERE PROFILES.PKID = :PKID;  -- Remove if you don't use profile provider
   END
  END

  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_FINDUSERSBYEMAIL (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    EMAILTOMATCH TYPE OF WP_VARCHAR100,
    PAGEINDEX TYPE OF WP_INTEGER,
    PAGESIZE TYPE OF WP_INTEGER)
RETURNS (
    USERNAME TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    CREATIONDATE TYPE OF WP_TIMESTAMP,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    LASTPASSWORDCHANGEDATE TYPE OF WP_TIMESTAMP,
    PKID TYPE OF WP_CHAR16_OCTETS,
    ISLOCKEDOUT TYPE OF WP_BOOL,
    LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP,
    TOTALRECORDS TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE PAGELOWERBOUND TYPE OF WP_INTEGER;
DECLARE VARIABLE PAGEUPPERBOUND TYPE OF WP_INTEGER;
BEGIN
 PAGELOWERBOUND = PAGESIZE * PAGEINDEX;
 PAGEUPPERBOUND = PAGESIZE;
 SELECT COUNT(1) FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME AND UPPEREMAIL LIKE UPPER(:EMAILTOMATCH) INTO :TOTALRECORDS;
 FOR SELECT FIRST(:PAGEUPPERBOUND) SKIP(:PAGELOWERBOUND)  USERNAME,EMAIL, PASSWORDQUESTION, COMMENT, ISAPPROVED,
            CREATIONDATE, LASTLOGINDATE, LASTACTIVITYDATE,
            LASTPASSWORDCHANGEDDATE,PKID, ISLOCKEDOUT,
            LASTLOCKEDOUTDATE
    FROM    USERS
    WHERE   APPLICATIONNAME = :APPLICATIONNAME AND UPPEREMAIL LIKE UPPER(:EMAILTOMATCH)
    ORDER BY USERNAME
    INTO :USERNAME,:EMAIL,:PASSWORDQUESTION,:COMMENT,:ISAPPROVED,:CREATIONDATE,:LASTLOGINDATE,
         :LASTACTIVITYDATE,:LASTPASSWORDCHANGEDATE,:PKID,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE
    DO
     SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_FINDUSERSBYNAME (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAMETOMATCH TYPE OF WP_VARCHAR100,
    PAGEINDEX TYPE OF WP_INTEGER,
    PAGESIZE TYPE OF WP_INTEGER)
RETURNS (
    USERNAME TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    CREATIONDATE TYPE OF WP_TIMESTAMP,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    LASTPASSWORDCHANGEDATE TYPE OF WP_TIMESTAMP,
    PKID TYPE OF WP_CHAR16_OCTETS,
    ISLOCKEDOUT TYPE OF WP_BOOL,
    LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP,
    TOTALRECORDS TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE PAGELOWERBOUND TYPE OF WP_INTEGER;
DECLARE VARIABLE PAGEUPPERBOUND TYPE OF WP_INTEGER;
BEGIN
 PAGELOWERBOUND = PAGESIZE * PAGEINDEX;
 PAGEUPPERBOUND = PAGESIZE;
 SELECT COUNT(1) FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME AND UPPERUSERNAME LIKE UPPER(:USERNAMETOMATCH) INTO :TOTALRECORDS;
 FOR SELECT FIRST(:PAGEUPPERBOUND) SKIP(:PAGELOWERBOUND)  USERNAME,EMAIL, PASSWORDQUESTION, COMMENT, ISAPPROVED,
            CREATIONDATE, LASTLOGINDATE, LASTACTIVITYDATE,
            LASTPASSWORDCHANGEDDATE,PKID, ISLOCKEDOUT,
            LASTLOCKEDOUTDATE
    FROM    USERS
    WHERE   APPLICATIONNAME = :APPLICATIONNAME AND UPPERUSERNAME LIKE UPPER(:USERNAMETOMATCH)
    ORDER BY USERNAME
    INTO :USERNAME,:EMAIL,:PASSWORDQUESTION,:COMMENT,:ISAPPROVED,:CREATIONDATE,:LASTLOGINDATE,
         :LASTACTIVITYDATE,:LASTPASSWORDCHANGEDATE,:PKID,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE
    DO
     SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETALLUSERS (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    PAGEINDEX TYPE OF WP_INTEGER,
    PAGESIZE TYPE OF WP_INTEGER)
RETURNS (
    USERNAME TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    CREATIONDATE TYPE OF WP_TIMESTAMP,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    LASTPASSWORDCHANGEDATE TYPE OF WP_TIMESTAMP,
    PKID TYPE OF WP_CHAR16_OCTETS,
    ISLOCKEDOUT TYPE OF WP_BOOL,
    LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP,
    TOTALRECORDS TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE PAGELOWERBOUND TYPE OF WP_INTEGER;
DECLARE VARIABLE PAGEUPPERBOUND TYPE OF WP_INTEGER;
BEGIN
 PAGELOWERBOUND = PAGESIZE * PAGEINDEX;
 PAGEUPPERBOUND = PAGESIZE;
 SELECT COUNT(1) FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME INTO :TOTALRECORDS;
 FOR SELECT FIRST(:PAGEUPPERBOUND) SKIP(:PAGELOWERBOUND)  USERNAME,EMAIL, PASSWORDQUESTION, COMMENT, ISAPPROVED,
            CREATIONDATE, LASTLOGINDATE, LASTACTIVITYDATE,
            LASTPASSWORDCHANGEDDATE,PKID, ISLOCKEDOUT,
            LASTLOCKEDOUTDATE
    FROM    USERS
    WHERE   APPLICATIONNAME = :APPLICATIONNAME ORDER BY USERNAME
    INTO :USERNAME,:EMAIL,:PASSWORDQUESTION,:COMMENT,:ISAPPROVED,:CREATIONDATE,:LASTLOGINDATE,
         :LASTACTIVITYDATE,:LASTPASSWORDCHANGEDATE,:PKID,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE
    DO
     SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETPASSWORD (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    MAXINVALIDPASSWORDATTEMPTS TYPE OF WP_INTEGER,
    PASSWORDATTEMPWINDOW TYPE OF WP_INTEGER,
    REQUIRESQUESTIONANSWER TYPE OF WP_INTEGER,
    PASSWORDANSWER TYPE OF WP_VARCHAR100)
RETURNS (
    USERPASSWORD TYPE OF WP_VARCHAR100,
    PASSWORDFORMAT TYPE OF WP_INTEGER,
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
DECLARE VARIABLE PASSWORDANSWER2 TYPE OF WP_VARCHAR100;
DECLARE VARIABLE ISLOCKEDOUT TYPE OF WP_BOOL;
DECLARE VARIABLE LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTCOUNT TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTSTART TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDANSWERCOUNT TYPE OF WP_BOOL;
DECLARE VARIABLE FAILEDPASSWORDANSWERSTART TYPE OF WP_TIMESTAMP;
BEGIN
  SELECT PKID,USERPASSWORD,PASSWORDFORMAT, PASSWORDANSWER,ISLOCKEDOUT,LASTLOCKEDOUTDATE,FAILEDPASSWORDATTEMPTCOUNT,FAILEDPASSWORDATTEMPTSTART ,
  FAILEDPASSWORDANSWERCOUNT,FAILEDPASSWORDANSWERSTART
         FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME AND UPPERUSERNAME = UPPER(:USERNAME)
         INTO :USERID,:USERPASSWORD,:PASSWORDFORMAT,:PASSWORDANSWER2,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE,:FAILEDPASSWORDATTEMPTCOUNT,
              :FAILEDPASSWORDATTEMPTSTART,:FAILEDPASSWORDANSWERCOUNT,:FAILEDPASSWORDANSWERSTART;
   IF (USERID IS NULL) THEN
   BEGIN
    RETURNCODE = 1;
    SUSPEND;
    EXIT;
   END
   IF (ISLOCKEDOUT = 1) THEN
   BEGIN
    RETURNCODE = 99;
    SUSPEND;
    EXIT;
   END

   IF (REQUIRESQUESTIONANSWER = 1) THEN
   BEGIN
    IF ((:PASSWORDANSWER2 IS NULL) OR (UPPER(:PASSWORDANSWER2) <> UPPER(:PASSWORDANSWER)))  THEN
    BEGIN
     FAILEDPASSWORDANSWERSTART = 'NOW';
     FAILEDPASSWORDANSWERCOUNT = 1;
    END
    ELSE
    BEGIN
     FAILEDPASSWORDANSWERCOUNT = FAILEDPASSWORDANSWERCOUNT + 1 ;
     FAILEDPASSWORDANSWERSTART = 'NOW';
    END
    IF (FAILEDPASSWORDANSWERCOUNT > MAXINVALIDPASSWORDATTEMPTS) THEN
    BEGIN
     ISLOCKEDOUT = 1;
     LASTLOCKEDOUTDATE = 'NOW';
    END
    RETURNCODE = 3;
   END
   ELSE
   BEGIN
    IF  (FAILEDPASSWORDANSWERCOUNT > 0 ) THEN
     BEGIN
      FAILEDPASSWORDANSWERCOUNT = 0;
      FAILEDPASSWORDANSWERSTART = NULL;
     END
   END
   UPDATE USERS SET
   ISLOCKEDOUT = :ISLOCKEDOUT,
   LASTLOCKEDOUTDATE = :LASTLOCKEDOUTDATE,
   FAILEDPASSWORDATTEMPTCOUNT = :FAILEDPASSWORDATTEMPTCOUNT,
   FAILEDPASSWORDATTEMPTSTART = :FAILEDPASSWORDATTEMPTSTART,
   FAILEDPASSWORDANSWERCOUNT = :FAILEDPASSWORDANSWERCOUNT,
   FAILEDPASSWORDANSWERSTART = :FAILEDPASSWORDANSWERSTART
   WHERE PKID =:USERID;
   RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETPASSWORDANDFORMAT (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    UPDATELASTLOGINACTIVITYDATE TYPE OF WP_BOOL)
RETURNS (
    USERPASSWORD TYPE OF WP_VARCHAR100,
    PASSWORDFORMAT TYPE OF WP_INTEGER,
    PASSWORDSALT TYPE OF WP_VARCHAR100,
    FAILEDPASSWORDATTEMPDCOUNT TYPE OF WP_INTEGER,
    FAILEDPASSWORDANSWERATTEMPCOUNT TYPE OF WP_INTEGER,
    ISAPPROVED TYPE OF WP_BOOL,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
DECLARE VARIABLE ISLOCKEDOUT TYPE OF WP_BOOL;
BEGIN
  SELECT PKID, ISLOCKEDOUT,USERPASSWORD,PASSWORDFORMAT,PASSWORDSALT, FAILEDPASSWORDATTEMPTCOUNT,FAILEDPASSWORDANSWERCOUNT,
         ISAPPROVED, LASTACTIVITYDATE, LASTLOGINDATE
         FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME AND UPPERUSERNAME = UPPER(:USERNAME)
         INTO :USERID,:ISLOCKEDOUT,:USERPASSWORD,:PASSWORDFORMAT,:PASSWORDSALT,:FAILEDPASSWORDATTEMPDCOUNT,
              :FAILEDPASSWORDANSWERATTEMPCOUNT,:ISAPPROVED,:LASTACTIVITYDATE,:LASTLOGINDATE;
   IF (USERID IS NULL) THEN
   BEGIN
    RETURNCODE = 1;
    SUSPEND;
    EXIT;
   END
   IF (ISLOCKEDOUT = 1) THEN
   BEGIN
    RETURNCODE = 99;
    SUSPEND;
    EXIT;
   END

   IF ((UPDATELASTLOGINACTIVITYDATE = 1) AND (ISAPPROVED = 1)) THEN
    BEGIN
        UPDATE  USERS
        SET     LASTLOGINDATE = 'NOW',
                LASTACTIVITYDATE = 'NOW'
        WHERE   PKID = :USERID;
    END
   RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETUSERBYEMAIL (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100)
RETURNS (
    USERNAME TYPE OF WP_VARCHAR100,
    RETURNCODE TYPE OF WP_INTEGER)
AS
BEGIN
  SELECT USERNAME FROM USERS WHERE UPPEREMAIL = UPPER(:EMAIL) AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERNAME;
  IF (USERNAME IS NULL) THEN
     RETURNCODE = 1;
  ELSE
    RETURNCODE = 0;

  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETUSERBYNAME (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    UPDATELASTACTIVITY TYPE OF WP_INTEGER)
RETURNS (
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    CREATIONDATE TYPE OF WP_TIMESTAMP,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    LASTPASSWORDCHANGEDATE TYPE OF WP_TIMESTAMP,
    PKID TYPE OF WP_CHAR16_OCTETS,
    ISLOCKEDOUT TYPE OF WP_BOOL,
    LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP,
    RETURNCODE TYPE OF WP_INTEGER)
AS
BEGIN
SELECT PKID FROM USERS WHERE UPPERUSERNAME = UPPER(:USERNAME) AND APPLICATIONNAME = :APPLICATIONNAME INTO :PKID;
IF (PKID IS NULL) THEN
BEGIN
 RETURNCODE = -1;
 SUSPEND;
 EXIT;
END
IF ( UPDATELASTACTIVITY = 1 ) THEN
BEGIN
  UPDATE   USERS
  SET      LASTACTIVITYDATE = 'NOW'
  WHERE    PKID = :PKID;
END

    SELECT  EMAIL, PASSWORDQUESTION, COMMENT, ISAPPROVED,
            CREATIONDATE, LASTLOGINDATE, LASTACTIVITYDATE,
            LASTPASSWORDCHANGEDDATE, ISLOCKEDOUT,
            LASTLOCKEDOUTDATE
    FROM    USERS
    WHERE   PKID = :PKID
    INTO :EMAIL,:PASSWORDQUESTION,:COMMENT,:ISAPPROVED,:CREATIONDATE,:LASTLOGINDATE,
         :LASTACTIVITYDATE,:LASTPASSWORDCHANGEDATE,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE;
    RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETUSERBYUSERID (
    PKID TYPE OF WP_CHAR16_OCTETS,
    UPDATELASTACTIVITY TYPE OF WP_INTEGER)
RETURNS (
    EMAIL TYPE OF WP_VARCHAR100,
    PASSWORDQUESTION TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    CREATIONDATE TYPE OF WP_TIMESTAMP,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    LASTPASSWORDCHANGEDATE TYPE OF WP_TIMESTAMP,
    USERNAME TYPE OF WP_VARCHAR100,
    ISLOCKEDOUT TYPE OF WP_BOOL,
    LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP,
    RETURNCODE TYPE OF WP_INTEGER)
AS
BEGIN
IF ( UPDATELASTACTIVITY = 1 ) THEN
BEGIN
  UPDATE   USERS
  SET      LASTACTIVITYDATE = 'NOW'
  WHERE    PKID = :PKID;

  IF ( ROW_COUNT = 0 )  THEN
  BEGIN
   RETURNCODE =  -1;
   SUSPEND;
   EXIT;
  END
END

    SELECT  EMAIL, PASSWORDQUESTION, COMMENT, ISAPPROVED,
            CREATIONDATE, LASTLOGINDATE, LASTACTIVITYDATE,
            LASTPASSWORDCHANGEDDATE, USERNAME, ISLOCKEDOUT,
            LASTLOCKEDOUTDATE
    FROM    USERS
    WHERE   PKID = :PKID
    INTO :EMAIL,:PASSWORDQUESTION,:COMMENT,:ISAPPROVED,:CREATIONDATE,:LASTLOGINDATE,
         :LASTACTIVITYDATE,:LASTPASSWORDCHANGEDATE,:USERNAME,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE;

    IF ( ROW_COUNT = 0 )  THEN
    BEGIN
       RETURNCODE = -1;
       SUSPEND;
       EXIT;
    END

    RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_GETUSERSONLINE (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    SINCELASTINACTIVE TYPE OF WP_TIMESTAMP)
RETURNS (
    NUMBERUSERS TYPE OF WP_INTEGER)
AS
BEGIN
NUMBERUSERS = 0;
 SELECT COUNT(1) FROM USERS WHERE LASTACTIVITYDATE > :SINCELASTINACTIVE
                                  AND APPLICATIONNAME = :applicationname
                                  INTO :NUMBERUSERS;
 SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_PASSQUESTIONANSWER (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    NEWPASSWORDQUESTION TYPE OF WP_VARCHAR100,
    NEWPASSWORDANSWER TYPE OF WP_VARCHAR100)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
BEGIN
  USERID = NULL;
  SELECT PKID FROM USERS WHERE UPPER(:USERNAME) = UPPERUSERNAME AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERID;
  IF (USERID IS NOT NULL) THEN
  BEGIN
   UPDATE USERS SET USERS.PASSWORDQUESTION = :NEWPASSWORDQUESTION,USERS.PASSWORDANSWER = :NEWPASSWORDANSWER
   WHERE USERS.PKID = :USERID;
   RETURNCODE = 0;
  END
  ELSE
  RETURNCODE = 1;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_RESETPASSWORD (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    NEWPASSWORD TYPE OF WP_VARCHAR100,
    MAXINVALIDPASSWORDATTEMPTS TYPE OF WP_INTEGER,
    PASSWORDATTEMPTWINDOW TYPE OF WP_INTEGER,
    PASSWORDSALT TYPE OF WP_VARCHAR100,
    PASSWORDFORMAT TYPE OF WP_INTEGER,
    REQUIRESQUESTIONANDANSWER TYPE OF WP_INTEGER,
    PASSWORDANSWER TYPE OF WP_VARCHAR100)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
DECLARE VARIABLE ISLOCKEDOUT TYPE OF WP_INTEGER;
DECLARE VARIABLE LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTCOUNT TYPE OF WP_INTEGER;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTSTART TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDANSWERCOUNT TYPE OF WP_INTEGER;
DECLARE VARIABLE FAILEDPASSWORDANSWERSTART TYPE OF WP_TIMESTAMP;
BEGIN
  USERID = NULL;
  SELECT PKID FROM USERS WHERE UPPER(:USERNAME) = UPPERUSERNAME AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERID;
  IF (USERID IS NOT NULL) THEN
  BEGIN
   SELECT ISLOCKEDOUT, LASTLOCKEDOUTDATE, FAILEDPASSWORDATTEMPTCOUNT, FAILEDPASSWORDATTEMPTSTART,
          FAILEDPASSWORDANSWERCOUNT , FAILEDPASSWORDANSWERSTART FROM USERS WHERE USERS.PKID =:USERID
          INTO :ISLOCKEDOUT,:LASTLOCKEDOUTDATE,:FAILEDPASSWORDATTEMPTCOUNT,:FAILEDPASSWORDATTEMPTSTART,
          :FAILEDPASSWORDANSWERCOUNT,:FAILEDPASSWORDANSWERSTART;
   IF (:ISLOCKEDOUT = 1) THEN
   BEGIN
   RETURNCODE = 99;
   SUSPEND;
   EXIT;
   END
   UPDATE USERS SET USERPASSWORD = :NEWPASSWORD, USERS.LASTPASSWORDCHANGEDDATE = 'NOW' , PASSWORDFORMAT = :PASSWORDFORMAT,
                    PASSWORDSALT = :PASSWORDSALT WHERE PKID = :USERID AND ((:REQUIRESQUESTIONANDANSWER = 0) OR (UPPER( PASSWORDANSWER ) = UPPER( :PASSWORDANSWER )));
   IF (ROW_COUNT = 0) THEN
   BEGIN
    IF (CAST('NOW' AS TIMESTAMP) > :FAILEDPASSWORDANSWERSTART + CAST(:PASSWORDATTEMPTWINDOW AS DOUBLE PRECISION)/1440.0) THEN
    BEGIN
     FAILEDPASSWORDANSWERSTART = 'NOW';
     FAILEDPASSWORDANSWERCOUNT = 1;
    END
    ELSE
    BEGIN
      FAILEDPASSWORDANSWERSTART = 'NOW';
      FAILEDPASSWORDANSWERCOUNT = FAILEDPASSWORDANSWERCOUNT + 1;
    END
    IF ( :FAILEDPASSWORDANSWERCOUNT >= :MAXINVALIDPASSWORDATTEMPTS ) THEN
    BEGIN
     ISLOCKEDOUT = 1;
     LASTLOCKEDOUTDATE = 'NOW';
    END
    RETURNCODE = 3;
   END
   ELSE
   BEGIN
    IF (:FAILEDPASSWORDANSWERCOUNT > 0) THEN
    BEGIN
     FAILEDPASSWORDANSWERCOUNT = 0;
     FAILEDPASSWORDANSWERSTART = 'NOW';
    END
   END
  END
  ELSE
  RETURNCODE = 1;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_SETPASSWORD (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    NEWPASSWORD TYPE OF WP_VARCHAR100,
    PASSWORDSALT TYPE OF WP_VARCHAR100,
    PASSWORDFORMAT TYPE OF WP_INTEGER)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
BEGIN
  SELECT PKID FROM USERS WHERE UPPER(:USERNAME) = UPPERUSERNAME AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERID;
  IF (USERID IS NOT NULL) THEN
  BEGIN
   UPDATE USERS SET USERS.USERPASSWORD = :NEWPASSWORD,USERS.PASSWORDFORMAT = :PASSWORDFORMAT,USERS.PASSWORDSALT = :PASSWORDSALT,USERS.LASTPASSWORDCHANGEDDATE = 'NOW'
   WHERE USERS.PKID = :USERID;
   RETURNCODE = 0;
  END
  ELSE
  RETURNCODE = 1;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_UNLOCKUSER (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
BEGIN
  SELECT PKID FROM USERS WHERE UPPER(:USERNAME) = UPPERUSERNAME AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERID;
  IF (USERID IS NULL) THEN
  BEGIN
   RETURNCODE = 1;
   SUSPEND;
   EXIT;
  END

  UPDATE USERS
  SET USERS.ISLOCKEDOUT = 0,
  USERS.FAILEDPASSWORDATTEMPTCOUNT = 0,
  USERS.FAILEDPASSWORDATTEMPTSTART = 0,
  USERS.FAILEDPASSWORDANSWERCOUNT = 0,
  USERS.FAILEDPASSWORDANSWERSTART = 0,
  USERS.LASTLOCKEDOUTDATE = 0
  WHERE PKID = :USERID;

  RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_UPDATEUSER (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    EMAIL TYPE OF WP_VARCHAR100,
    COMMENT TYPE OF WP_VARCHAR100,
    ISAPPROVED TYPE OF WP_BOOL,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP,
    UNIQUEEMAIL TYPE OF WP_INTEGER)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
BEGIN
  SELECT PKID FROM USERS WHERE UPPER(:USERNAME) = UPPERUSERNAME AND APPLICATIONNAME = :APPLICATIONNAME INTO :USERID;
  IF (USERID IS NULL) THEN
  BEGIN
   RETURNCODE = 1;
   SUSPEND;
   EXIT;
  END

  IF (:UNIQUEEMAIL = 1) THEN
   IF (EXISTS(SELECT PKID FROM USERS WHERE APPLICATIONNAME = :APPLICATIONNAME AND PKID <> :USERID AND UPPEREMAIL = UPPER(:EMAIL))) THEN
   BEGIN
    RETURNCODE = 7;
    SUSPEND;
    EXIT;
   END
  UPDATE USERS
  SET USERS.LASTACTIVITYDATE = :LASTACTIVITYDATE,
  EMAIL = :EMAIL,
  UPPEREMAIL = UPPER(:EMAIL),
  COMMENT = :COMMENT,
  ISAPPROVED = :ISAPPROVED,
  LASTLOGINDATE = :LASTLOGINDATE
  WHERE PKID = :USERID;

  RETURNCODE = 0;
  SUSPEND;
END
^

CREATE OR ALTER PROCEDURE MEMBERSHIP_UPDATEUSERINFO (
    APPLICATIONNAME TYPE OF WP_VARCHAR100,
    USERNAME TYPE OF WP_VARCHAR100,
    ISPASSWORDCORRECT TYPE OF WP_BOOL,
    UPDATELASTLOGINACTIVITYDATE TYPE OF WP_INTEGER,
    MAXINVALIDPASSWORDATTEMPS TYPE OF WP_INTEGER,
    PASSWORDATTEMPTWINDOW TYPE OF WP_INTEGER,
    LASTLOGINDATE TYPE OF WP_TIMESTAMP,
    LASTACTIVITYDATE TYPE OF WP_TIMESTAMP)
RETURNS (
    RETURNCODE TYPE OF WP_INTEGER)
AS
DECLARE VARIABLE USERID TYPE OF WP_CHAR16_OCTETS;
DECLARE VARIABLE ISAPPROVED TYPE OF WP_INTEGER;
DECLARE VARIABLE ISLOCKEDOUT TYPE OF WP_INTEGER;
DECLARE VARIABLE LASTLOCKEDOUTDATE TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTCOUNT TYPE OF WP_INTEGER;
DECLARE VARIABLE FAILEDPASSWORDATTEMPTSTART TYPE OF WP_TIMESTAMP;
DECLARE VARIABLE FAILEDPASSWORDANSWERCOUNT TYPE OF WP_INTEGER;
DECLARE VARIABLE FAILEDPASSWORDANSWERSTART TYPE OF WP_TIMESTAMP;
BEGIN
  RETURNCODE = 0;
  SELECT PKID,ISAPPROVED, ISLOCKEDOUT,LASTLOCKEDOUTDATE,USERS.FAILEDPASSWORDATTEMPTCOUNT,
         USERS.FAILEDPASSWORDATTEMPTSTART,USERS.FAILEDPASSWORDANSWERCOUNT,USERS.FAILEDPASSWORDANSWERSTART
  FROM USERS  WHERE APPLICATIONNAME = :APPLICATIONNAME AND UPPERUSERNAME = UPPER(:USERNAME)
  INTO :USERID,:ISAPPROVED,:ISLOCKEDOUT,:LASTLOCKEDOUTDATE,:FAILEDPASSWORDATTEMPTCOUNT,:FAILEDPASSWORDATTEMPTSTART,
       :FAILEDPASSWORDANSWERCOUNT,:FAILEDPASSWORDANSWERSTART;

  IF (USERID IS NULL) THEN
  BEGIN
  RETURNCODE = 1;
  SUSPEND;
  EXIT;
  END
  IF (:ISLOCKEDOUT = 1) THEN
  BEGIN
  RETURNCODE = 99;
  SUSPEND;
  EXIT;
  END

  IF (ISPASSWORDCORRECT = 0) THEN
  BEGIN
  IF (CAST('NOW' AS TIMESTAMP) > FAILEDPASSWORDATTEMPTSTART + CAST(:PASSWORDATTEMPTWINDOW AS DOUBLE PRECISION)/1440.0) THEN
   BEGIN
    FAILEDPASSWORDATTEMPTSTART = 'NOW';
    FAILEDPASSWORDATTEMPTCOUNT = 1;
   END
   ELSE
   BEGIN
    FAILEDPASSWORDATTEMPTSTART = 'NOW';
    FAILEDPASSWORDATTEMPTCOUNT = FAILEDPASSWORDATTEMPTCOUNT + 1;
   END
   IF( FAILEDPASSWORDATTEMPTCOUNT >= MAXINVALIDPASSWORDATTEMPS )  THEN
   BEGIN
    ISLOCKEDOUT = 1;
    LASTLOCKEDOUTDATE = 'NOW';
   END

  END
  ELSE
  BEGIN
   IF ((FAILEDPASSWORDATTEMPTCOUNT > 0) OR (FAILEDPASSWORDANSWERCOUNT > 0) ) THEN
   BEGIN
    FAILEDPASSWORDATTEMPTCOUNT = 0;
    FAILEDPASSWORDATTEMPTSTART = NULL;
    FAILEDPASSWORDANSWERCOUNT = 0;
    FAILEDPASSWORDANSWERSTART = NULL;
    LASTLOCKEDOUTDATE = NULL;
   END
  END

  IF (UPDATELASTLOGINACTIVITYDATE = 1) THEN
  BEGIN
   UPDATE USERS SET
   LASTACTIVITYDATE = :LASTACTIVITYDATE,
   LASTLOGINDATE = :LASTLOGINDATE,
   ISLOCKEDOUT = :ISLOCKEDOUT,
   LASTLOCKEDOUTDATE = :LASTLOCKEDOUTDATE,
   FAILEDPASSWORDATTEMPTCOUNT = :FAILEDPASSWORDATTEMPTCOUNT,
   FAILEDPASSWORDATTEMPTSTART = :FAILEDPASSWORDATTEMPTSTART,
   FAILEDPASSWORDANSWERCOUNT = :FAILEDPASSWORDANSWERCOUNT,
   FAILEDPASSWORDANSWERSTART = :FAILEDPASSWORDANSWERSTART
   WHERE PKID = :USERID;
  END
  SUSPEND;
END
^


SET TERM ; ^


/******************************************************************************/
/*                                 Privileges                                 */
/******************************************************************************/


/* Privileges of procedures */
GRANT SELECT,INSERT ON USERS TO PROCEDURE MEMBERSHIP_CREATEUSER;
GRANT SELECT,DELETE ON PROFILES TO PROCEDURE MEMBERSHIP_DELETEUSER; -- Remove if you don't use profile provider
GRANT SELECT,DELETE ON USERS TO PROCEDURE MEMBERSHIP_DELETEUSER;
GRANT SELECT,DELETE ON USERSINROLES TO PROCEDURE MEMBERSHIP_DELETEUSER; -- Remove if you don't use role provider
GRANT SELECT ON USERS TO PROCEDURE MEMBERSHIP_FINDUSERSBYEMAIL;
GRANT SELECT ON USERS TO PROCEDURE MEMBERSHIP_FINDUSERSBYNAME;
GRANT SELECT ON USERS TO PROCEDURE MEMBERSHIP_GETALLUSERS;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_GETPASSWORD;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_GETPASSWORDANDFORMAT;
GRANT SELECT ON USERS TO PROCEDURE MEMBERSHIP_GETUSERBYEMAIL;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_GETUSERBYNAME;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_GETUSERBYUSERID;
GRANT SELECT ON USERS TO PROCEDURE MEMBERSHIP_GETUSERSONLINE;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_PASSQUESTIONANSWER;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_RESETPASSWORD;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_SETPASSWORD;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_UNLOCKUSER;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_UPDATEUSER;
GRANT SELECT,UPDATE ON USERS TO PROCEDURE MEMBERSHIP_UPDATEUSERINFO;
